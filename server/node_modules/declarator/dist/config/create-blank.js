"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBlackConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const log_1 = require("../util/log");
const reader_1 = require("./reader");
const blankConfig = `/* eslint-env node */

module.exports = () => ({
  // All packages that should be typed
  packages: [],

  // All default configs
  defaults: {}
});
`;
async function createBlackConfig() {
    for (const name of reader_1.possibleFilenames) {
        const file = path_1.default.resolve(process.cwd(), name);
        if (fs_1.default.existsSync(file)) {
            log_1.log.error `An "${name}" already exists`;
            return;
        }
    }
    const file = path_1.default.resolve(process.cwd(), reader_1.possibleFilenames[0] || 'declarator.js');
    try {
        await fs_1.default.promises.writeFile(file, blankConfig);
        log_1.log.info `Created "${reader_1.possibleFilenames[0]}"`;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (e) {
        log_1.log.error `Failed to create a blank config at "${file}" ${e}`;
    }
}
exports.createBlackConfig = createBlackConfig;
//# sourceMappingURL=create-blank.js.map