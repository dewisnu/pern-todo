"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitTypes = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const log_1 = require("../util/log");
const shell_1 = require("../util/shell");
const info_1 = require("./info");
/**
 * Emit the declaration types for a package
 *
 * @param name the package name
 * @param cwd the package directory
 * @param info the package info
 * @returns true if the declaration types were emitted
 */
async function emitTypes(name, cwd, info) {
    const infoPath = path_1.default.join(cwd, info_1.filename);
    const [stdout, error] = await (0, shell_1.childExec)(`tsc -p ${infoPath}`, { cwd });
    if (error) {
        log_1.log.error `Could not complete type generation for ${name}. Check debug logs`;
        log_1.log.debug `${error.err}`;
        log_1.log.debug `${stdout}`;
        log_1.log.debug `${error.stderr}`;
        info.declarator.typed = false;
    }
    else {
        log_1.log.debug `${name} was typed`;
        log_1.log.debug `${stdout}`;
        info.declarator.typed = true;
    }
    // Update package info file
    await promises_1.default.writeFile(infoPath, JSON.stringify(info));
    return info.declarator.typed;
}
exports.emitTypes = emitTypes;
//# sourceMappingURL=emitter.js.map