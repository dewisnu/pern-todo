"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageInfo = exports.infoVersion = exports.filename = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const log_1 = require("../util/log");
/**
 * The filename to be our info and tsconfig
 */
exports.filename = 'declarator.generated.json';
/**
 * The package info compatibility version
 */
exports.infoVersion = 1;
/**
 * Attempts to read or create the package info located at root.
 *
 * @param name the package name
 * @param packagePath the path where the package is located
 * @param config the package tsconfig that should be used in case the package is not found or outdated
 * @returns a promise with the package info
 */
async function getPackageInfo(name, packagePath, config) {
    const infoPath = path_1.default.join(packagePath, exports.filename);
    let info;
    try {
        const json = (await promises_1.default.readFile(infoPath)).toString();
        const content = JSON.parse(json);
        const { declarator } = content;
        const outdated = declarator?.version < exports.infoVersion;
        const newer = declarator?.version > exports.infoVersion;
        if (outdated || newer) {
            log_1.log.warn `package ${name} has ${outdated ? 'an outdated' : 'a newer'} declarator version of ${declarator?.version}`;
            await promises_1.default.writeFile(path_1.default.join(packagePath, exports.filename + '.old'), 
            // Prettify it to be clear if a human tries to read it
            JSON.stringify(content, null, 2));
            log_1.log.info `A ${infoPath}.old was generated.`;
            // Skips to catch block
            throw null;
        }
        info = content;
    }
    catch {
        // Handles any case of error by overriding the package with a newly one.
        info = { declarator: { typed: false, version: exports.infoVersion, name }, ...config };
        await promises_1.default.writeFile(infoPath, JSON.stringify(info));
        log_1.log.debug `Wrote a default config for ${name}.`;
    }
    return info;
}
exports.getPackageInfo = getPackageInfo;
//# sourceMappingURL=info.js.map