"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProgram = void 0;
const commander_1 = require("commander");
// extracts the relative path to prevent typescript compiler
// to add a copy of package.json to dist folder
const pkgJsonPath = '../../package.json';
async function createProgram() {
    const { version } = await Promise.resolve().then(() => __importStar(require(pkgJsonPath)));
    const program = new commander_1.Command();
    program
        // info
        .name('declarator')
        .version(version)
        // help
        .usage('[flags]')
        .addHelpCommand(true);
    program.option('-d, --debug', 'output extra debugging', false);
    program.option('--init', 'create a blank config file', false);
    return program;
}
exports.createProgram = createProgram;
//# sourceMappingURL=program.js.map